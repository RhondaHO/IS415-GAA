{
  "hash": "51cd30982ffe37dde7f7dde06163f710",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1: Geospatial Data Wrangling with R\"\n\ntitle-block-banner: true\n\ndate-modified: last-modified\n\nformat: html  \n\nexecute: \n  message: false\n  warning: false\n\neditor: visual\n---\n\n\n## Getting Started\n\nInstall and load the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"pacman\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n## Importing Geospatial Data\n\n1.  Import data from the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:\n    -   *MP14_SUBZONE_WEB_PL*, a polygon feature layer in ESRI shapefile format\n\n    -   *CyclingPath*, a line feature layer in ESRI shapefile format\n\n    -   *PreSchool*, a point feature layer in kml file format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\RhondaHO\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\RhondaHO\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\RhondaHO\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n2.  Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n## Checking Content of a Simple Feature Dataframe\n\n1.  Retrieve information related to the content of a simple feature data frame using methods:\n\n    -   st_geometry()\n\n    -   glimpse()\n\n    -   head()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n\n```{.r .cell-code}\nhead(mpsz, n=5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n:::\n:::\n\n\n## Plotting the Geospatial Data\n\n1.  To visualise the geospatial features, make use of *plot()* of R Graphic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n2.  To plot only the geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n:::\n\n\n3.  Plot the sf object by using a specific attribute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n:::\n\n\n## Assigning EPSG code to a simple feature data frame\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either [missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned]{.underline} during the importing process.\n\nThis is an example the coordinate system of mpsz simple feature data frame by using *st_crs()* of sf package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n:::\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\n\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_set_crs(mpsz, 3414)\nst_crs(mpsz3414)\n```\n:::\n\n\n## Transforming the projection of preschool from wgs84 to svy21\n\nIn geospatial analytics, it is very common for us to transform the original data [from geographic coordinate system to projected coordinate system]{.underline}. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\nThis is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n```\n:::\n\n\n## Importing and Converting An Aspatial Data\n\nSince listings data set is in csv file format, we will use *read_csv()* of **readr** package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"chap01/data/aspatial/listings.csv\")\nlist(listings)\n```\n:::\n\n\n## Creating a simple feature data frame from an aspatial data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n## Geoprocessing with sf package\n\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths. This is followed by calculating the area of the buffers as shown in the code chunk below. Lastly, sum() of Base R will be used to derive the total land involved.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n```\n:::\n\n\n## Point-in-polygon count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\ntop_n(mpsz3414, 1, `PreSch Count`)\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n:::\n\n\n## Explorotary Data Analysis (EDA)\n\n1.  Histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz3414$`PreSch Density`)\n```\n:::\n\n\n2.  Customisable Histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n```\n:::\n\n\n3.  Scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n```\n:::\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}