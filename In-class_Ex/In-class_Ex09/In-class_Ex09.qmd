---
title: "In-class Ex 9"

title-block-banner: true

date: "6 march 2023" 
date-modified: last-modified 
author: "Rhonda Ho Kah Yee"

format: 
  html: 
    code-fold: true 
    code-tools: true

execute: 
  message: false 
  warning: false 
  eval: false

editor: visual
---

## 

## Getting Started

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse,
               tmap, ggpubr, olsrr, devtools)

#tidymodels, load rsample
```

## Data Preparation

### Reading Aspatial data file to rds

```{r}
mdata <- read_rds("data/aspatial/mdata.rds")
```

### Reading Geospatial data

```{r}
subzone <- st_read(dsn = "data/geospatial", 
                   layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
set.seed(123)

resale_split <- rsample::initial_split(mdata,
                               prop = 6.5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

## 

```{r}
#| eval: false

write_rds(train_data,'data/model/train_data.rds')
write_rds(test_data,'data/model/test_data.rds')
```

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm + storey_order +
                  remaining_lease_mths + PROX_CBD +PROX_ELDERLYCARE+
                  PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data) #impt for predictive model


summary(price_mlr)

#for predictive model, important parts:
#Residual standard error: 61390 on 10320 degrees of freedom
#Multiple R-squared:  0.7427,	Adjusted R-squared:  0.7424 

```

```{r}
#| eval: false
write_rds(price_mlr,"data/model/price_mlr.rds")
```

Convert simple feature to spatial

```{r}

train_data_sp <- as_Spatial(train_data)
train_data_sp
```

Take note: should check that data is always training data

Ranger does not know how to handle simple feature (cannot understand the list in geometry table). Thus, we need to prepare coordinates data.

```{r}

#extracts geometry info
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test<- st_coordinates(test_data)
                               
```

```{r}
#writes to rds file
coords_train <- write_rds(coords_train, "data/model/coords_train.rds")
coords_test <- write_rds(coords_test, "data/model/coords_test.rds")
```

```{r}
#drop geomtry
train_data <- train_data %>%
  st_drop_geometry()
  
```

```{r}
set.seed(123)

rf <- ranger(resale_price ~ floor_area_sqm + storey_order +
                  remaining_lease_mths + PROX_CBD +PROX_ELDERLYCARE+
                  PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
```

```{r}
print(rf)
```

OOB prediction error (MSE): 695049755 is the mean sqr value, if we want to use MSE needs to square root it first, compared with residual standard error.

```{r}

#should not be ore than 10 mins
set.seed(1234)

gwRF_adaptive<- grf(formula = resale_price ~ floor_area_sqm +
                      storey_order +
                  remaining_lease_mths + PROX_CBD +PROX_ELDERLYCARE+
                  PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  dframe= train_data,
                  bw=55, #no. of observations/closest neighbour
                  kernel="adaptive", #if calibrate as fixed, bw is diff,
                  coords=coords_train #put the coords back in 
                  )

```

save model result

```{r}
write_rds(gwRF_adaptive,'data/model/gwRF_adaptive.rds')
```

gwRF_adaptive\$Global.Model

gwRF_adaptive\$Global.Model

\$variable.importance

```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```
