---
title: "In-class Exercise 2: Geospatial Data Wrangling"

title-block-banner: true

date: "r Sys.Date()"

format: html  
#docx/pdf -> can change to different formats

execute: 
  message: false
  warning: false
  #to not show warning/error msgs
editor: visual
---

## Task 1

Using appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.

1.  Install the required packages.

```{r}
#| eval: false
install.packages('pacman')
```

2.  Load the packages.

```{r}
#| eval: false
pacman::p_load(sf, tidyverse, funModeling)
```

3.  Read the file from geoBoundaries.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
geoNGA = st_read(dsn = "data/geospatial/", layer="geoBoundaries-NGA-ADM2")%>%st_transform(crs=26392)

#transforms data from decimal to metres

```

4.  Read the file from Humanitarian Data Exchange.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
NGA = st_read(dsn = "data/geospatial/", layer="nga_admbnda_adm2_osgof_20190417")%>%st_transform(crs=26392)
```

5.  Read the file from and filter out where country name is Nigeria

```{r}
#| eval: false
wp_nga <- read_csv("data/aspatial/wpdx.csv") %>%
  filter(clean_country_name %in% c("Nigeria"))

#list(wpdx)

```

## Task 2

Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`new_georeferenced_column_`)
wp_nga

wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf

wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

```{r}
#exclude redundant fields
NGA <- NGA %>%
  select(3:4, 8:9)
```

```{r}
#check for duplicate names
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]


#lets correct the errors (suppose to manually find)

```

```{r}
#check frequency count

freq(data = wp_sf,
     input = "status_clean")
```

```{r}
#replace NA fills with unknown
wp_sf_nga <- wp_sf%>%
  rename(status_clean = 'status_clean') %>%
    select(status_clean) %>%
    mutate(status_clean = replace_na(
           status_clean, "unknown"))
```

```{r}
#filter out the NA values, extract functional water output
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c(
             "Functional",
             "Functional, needs repair",
             "Functional, not in use"
           ))
```

```{r}
#extract non functional
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c(
             "Abandoned/Decommissioned",
             "Non-Functional",
             "Non-Functional, dry"
           ))
```

```{r}
#extract unknown
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

```{r}

# extra step to cross check whether previously extracted correctly
NGA_wp <- NGA %>%
  mutate(`total_wp`= lengths(
    st_intersects(NGA, wp_sf_nga)
  )) %>%
  mutate(`wp_functional`= lengths(
    st_intersects(NGA, wp_sf_nga)
  )) %>%
  mutate(`wp_nonfunctional`= lengths(
    st_intersects(NGA, wp_sf_nga)
  )) %>%
  mutate(`wp_unknown`= lengths(
    st_intersects(NGA, wp_sf_nga)
  ))
  
```

```{r}
#save in rds format (rds allow us to retain the data structure/simple feature with the data properties)

write_rds(NGA_wp, "data/rds/NGA_wp.rds")

```

```{r}
#| eval: false
st_geometry(geoNGA)
glimpse(geoNGA)
head(geoNGA, n=5)

st_geometry(nga)
glimpse(nga)
head(nga, n=5)
```

```{r}
library(dplyr)
```

```{r}

```

Convert into a simple dataframe feature

```{r}
#| eval: false
wpdx_sf <- st_as_sf(wpdx, 
                       coords = c("lat_deg", "lon_deg"),
                       crs=4326) %>% st_transform(crs = 3414)
```

Take a look at the dataframe.

```{r}
#| eval: false
glimpse(wpdx_sf)
```

Replace NA values of *status_clean* to empty string and then mutate the dataframe so that functional = 1, non-functional = 0.

```{r}
#| eval: false
wpdx_sf <- replace(wpdx_sf['status_clean'], is.na(wpdx_sf['status_clean']), "")

wpdx_sf %>%
 select(status_clean) %>%
 mutate(
  functional = case_when(status_clean!="" ~ 1,
                         status_clean=="" ~ 0
                         )
 )


```

rrr

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) +
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
    color="red",
    linetype="dashed",
    
  )))
```

```{r}
#| eval: false
wpdx_sf$functional<-as.numeric(wpdx_sf$functional)
#hist(wpdx_sf$`functional`)gg
```

## Task 3

Combining the geospatial and aspatial data frame into simple feature data frame.

```{r}

```

## Task 4

Visualising the distribution of water point by using appropriate analytical visualisation methods.

```{r}
#| eval: false
plot(nga)
```

```{r}
#| eval: false
plot(geoNGA)
```
