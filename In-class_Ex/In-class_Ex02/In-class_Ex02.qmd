---
title: "In-class Exercise 2: Geospatial Data Wrangling"

title-block-banner: true

date: "r Sys.Date()"

format: html  
#docx/pdf -> can change to different formats

execute: 
  message: false
  warning: false
  #to not show warning/error msgs
editor: visual
---

## Task 1

Using appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.

1.  Install the required packages.

```{r}
#| eval: false
install.packages('pacman')
```

2.  Load the packages.

```{r}
#| eval: false
pacman::p_load(sf, tidyverse, funModeling)
```

3.  Read the file from geoBoundaries.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
geoNGA = st_read(dsn = "data/geospatial/", layer="geoBoundaries-NGA-ADM0")%>%st_transform(crs=26392)

```

4.  Read the file from Humanitarian Data Exchange.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
nga = st_read(dsn = "data/geospatial/", layer="nga_admbnda_adm1_osgof_20190417")%>%st_transform(crs=26392)
```

## Task 2

Using appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.

```{r}
#| eval: false
st_geometry(geoNGA)
glimpse(geoNGA)
head(geoNGA, n=5)

st_geometry(nga)
glimpse(nga)
head(nga, n=5)
```

```{r}
library(dplyr)
```

```{r}
#| eval: false
wpdx <- read_csv("data/aspatial/wpdx.csv")
list(wpdx)
```

Convert into a simple dataframe feature

```{r}
#| eval: false
wpdx_sf <- st_as_sf(wpdx, 
                       coords = c("lat_deg", "lon_deg"),
                       crs=4326) %>% st_transform(crs = 3414)
```

Take a look at the dataframe.

```{r}
#| eval: false
glimpse(wpdx_sf)
```

Replace NA values of *status_clean* to empty string and then mutate the dataframe so that functional = 1, non-functional = 0.

```{r}
#| eval: false
wpdx_sf <- replace(wpdx_sf['status_clean'], is.na(wpdx_sf['status_clean']), "")

wpdx_sf %>%
 select(status_clean) %>%
 mutate(
  functional = case_when(status_clean!="" ~ 1,
                         status_clean=="" ~ 0
                         )
 )


```

```{r}
#| eval: false
wpdx_sf$functional<-as.numeric(wpdx_sf$functional)
#hist(wpdx_sf$`functional`)
```

## Task 3

Combining the geospatial and aspatial data frame into simple feature data frame.

```{r}

```

## Task 4

Visualising the distribution of water point by using appropriate analytical visualisation methods.

```{r}
#| eval: false
plot(nga)
```

```{r}
#| eval: false
plot(geoNGA)
```
