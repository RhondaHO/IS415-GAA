---
title: "In-class Ex 10"

title-block-banner: true

date: "20 march 2023" 
date-modified: last-modified 
author: "Rhonda Ho Kah Yee"

format: 
  html: 
    code-fold: true 
    code-tools: true

execute: 
  message: false 
  warning: false 
  eval: false

editor: visual
---

## Getting Started

```{r}
pacman::p_load(tmap, SpatialAcc, sf, readr, tidyr, fca,
               ggstatsplot, reshape2,
               tidyverse)
```

## Geospatial Data Wrangling

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL")

hexagons <- st_read(dsn = "data/geospatial", layer = "hexagons") 

eldercare <- st_read(dsn = "data/geospatial", layer = "ELDERCARE") 

```

### Updating CRS information

```{r}
mpsz <- st_transform(mpsz, 3414)
eldercare <- st_transform(eldercare, 3414)
hexagons <- st_transform(hexagons, 3414)
```

```{r}
st_crs(mpsz)
```

### Cleaning and updating attribute fields of the geospatial data

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  rename(destination_id=fid,
         postal_code= ADDRESSPOS) %>%
  mutate(capacity = 100)

hexagons <- hexagons %>%
  select(fid) %>%
  rename(origin_id=fid) %>%
  mutate(demand = 100)
```

Notice that for the purpose of this hands-on exercise, a constant value of 100 is used. In practice, actual demand of the hexagon and capacity of the eldercare centre should be used.

## Apsaital Data Handling and Wrangling

### Importing Distance Matrix

```{r}
ODMatrix <- read_csv("data/aspatial/OD_Matrix.csv", skip = 0)

```

```{r}
#row is origin, col is destination
# for fca, it is the opposite

distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

```{r}
#from metres to km
distmat_km <- as.matrix(distmat/1000)


```

### Computing Distance Matrix (Optional)

```{r}

eldercare_coord<- st_coordinates(eldercare)
hexagon_coord <- st_coordinates(hexagons
                                )
```

```{r}
EucMatrix <- SpatialAcc::distance(hexagon_coord,
                                  eldercare_coord,
                                  type="euclidean")
```

## Modelling and Visualising Accessibility using Hansen Method

### Computing Hansen's accessibility

The code chunk below calculates Hansen's accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_Handsen.

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 2, 
                            family = "Hansen"))
```

The default field name is very messy, we will rename it to accHansen by using the code chunk below.

```{r}
colnames(acc_Hansen) <- "accHansen"

```

Next, we will convert the data table into tibble format by using the code chunk below.

```{r}
#Warning: `tbl_df()` was deprecated in dplyr 1.0.0.
acc_Hansen <- tibble::as_tibble(acc_Hansen)
```

Lastly, bind_cols() of dplyr will be used to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called hexagon_Hansen.

```{r}
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

The steps above can be perform by using a single code chunk as shown below.

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 0.5, 
                            family = "Hansen"))

colnames(acc_Hansen) <- "accHansen"
acc_Hansen <- tibble::as_tibble(acc_Hansen)
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

### Visualising Hansen's accessibility

```{r}
mapex <- st_bbox(hexagons)
```

```{r}
tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

### Statistical graphic visualisation

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
```

```{r}
ggplot(data=hexagon_Hansen, 
       aes(y = log(accHansen), 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

## Modelling and Visualising Accessibility using KD2SFCA Method

### Computing KD2SFCA's accessibility

```{r}
acc_KD2SFCA <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            d0 = 50,
                            power = 2, 
                            family = "KD2SFCA"))

colnames(acc_KD2SFCA) <- "accKD2SFCA"
acc_KD2SFCA <- tbl_df(acc_KD2SFCA)
hexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)
```

### Visualising KD2SFCA's accessibility

```{r}
tmap_mode("plot")
tm_shape(hexagon_KD2SFCA,
         bbox = mapex) + 
  tm_fill(col = "accKD2SFCA",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: KD2SFCA method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

### Statistical graphic visualisation

```{r}
hexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, 
                          join = st_intersects)
```

```{r}
ggplot(data=hexagon_KD2SFCA, 
       aes(y = accKD2SFCA, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

## Modelling and Visualising Accessibility using Spatial Accessibility Measure (SAM) Method

### Computing SAM accessibility

```{r}
acc_SAM <- data.frame(ac(hexagons$demand,
                         eldercare$capacity,
                         distmat_km, 
                         d0 = 50,
                         power = 2, 
                         family = "SAM"))

colnames(acc_SAM) <- "accSAM"
acc_SAM <- tbl_df(acc_SAM)
hexagon_SAM <- bind_cols(hexagons, acc_SAM)
```

### Visualising SAM's accessibility

```{r}
tmap_mode("plot")
tm_shape(hexagon_SAM,
         bbox = mapex) + 
  tm_fill(col = "accSAM",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: SAM method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 3),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

### Statistical graphic visualisation

```{r}
hexagon_SAM <- st_join(hexagon_SAM, mpsz, 
                       join = st_intersects)
```

```{r}
ggplot(data=hexagon_SAM, 
       aes(y = accSAM, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```
