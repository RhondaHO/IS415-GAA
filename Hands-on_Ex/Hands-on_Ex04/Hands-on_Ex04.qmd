---
title: "Hands-on Exercise 4: 1st Order Spatial Point Patterns Analysis Methods"

title-block-banner: true

date: "30 january 2023"
date-modified: last-modified

format: html  

execute: 
  message: false
  warning: false

editor: visual
---

## 1. Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or

-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

## 2. Getting Started

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

## 3. Spatial Data Wrangling

### 3.1 Importing the spatial data

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### 3.2 Mapping the geospatial data sets

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()

```

Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('plot')

```

## 4. Geospatial Data wrangling

The first 3 steps are important for dealing with geospatial data wrangling. Source data must be in sf., source data needs to be in the same projection system as once it is converted, cannot tell.

### 4.1 Converting sf data frames to sp's Spatial\* class

The code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

### 4.2 Creating a choropleth map by using tmap's elements

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
mpsz
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg
```

### 4.3 Converting the Spatial\* class into generic sp format

spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sp
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg
```

### 4.4 Converting the generic sp format into spatstat's ppp format

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp

plot(childcare_ppp)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(childcare_ppp)

```

### 4.5 Handling duplicated points

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
#check for duplication
any(duplicated(childcare_ppp))

#count the number of co-indicence point
multiplicity(childcare_ppp)

#how many locations have more than one point event
sum(multiplicity(childcare_ppp) > 1)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('plot')

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
any(duplicated(childcare_ppp_jit))
```

### 4.6 Creating owin object

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg_owin <- as(sg_sp, "owin")
plot(sg_owin)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(sg_owin)
```

### 4.6 Combining point events object and owin object

Extract childcare events that are located within Singapore

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(childcareSG_ppp)
```

### 4.6 First-order Spatial Point Patterns Analysis

#### 4.6.1 Kernel Density Estimation

##### 4.6.1.1 Computing kernel density estimation using automatic bandwidth selection method

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
plot(kde_childcareSG_bw, main="kde_childcareSG.bw in m^2")
```

Retrieve the bandwidth used to compute the kde layer

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
bw <- bw.diggle(childcareSG_ppp)
bw
```

##### 4.6.1.2 Rescalling KDE values

Rescale() is used to covert the unit of measurement from meter to kilometer.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw, main="kde_childcareSG.bw in km")

```

#### 4.6.2 Working with different automatic badwidth methods

Other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
bw.CvL(childcareSG_ppp.km)
bw.scott(childcareSG_ppp.km)

#tends to produce the more appropriate values when the pattern consists predominantly of tight clusters
bw.ppl(childcareSG_ppp.km)

#Best Method to detect a single tight cluster in the midst of random noise
bw.diggle(childcareSG_ppp.km)

```

Compare the output of using bw.diggle and bw.ppl methods.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

#### 4.6.3 Working with different kernel methods

By default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

### 4.7 Fixed and Adaptive KDE

#### 4.7.1 Computing KDE by using fixed bandwidth

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

#### 4.7.2 Computing KDE by using adaptive bandwidth

Derive adaptive kernel density estimation by using density.adaptive() of spatstat.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

#### 4.7.3 Converting KDE output into grid object

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

##### 4.7.3.1 Converting gridded output into raster

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
#| 
#Convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.
kde_childcareSG_bw_raster <-raster(gridded_kde_childcareSG_bw)

kde_childcareSG_bw_raster
```

##### 4.7.3.2 Assigning projection systems

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
projection(kde_childcareSG_bw_raster) <-CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

#### 4.7.4 Visualising the output in tmap

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### 4.7.5 Comparing Spatial Point Patterns using KDE

Compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

##### 4.7.5.1 Extracting study area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

Plotting of target planning areas

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

##### 4.7.5.2 Converting the spatial point data frame into generic sp format

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

##### 4.7.5.3 Creating owin object

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

#### 4.7.5.4 Combining childcare points and the study area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false

#Extract childcare that is within the specific region to do our analysis later on.

childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]

# Next, rescale() function is used to trasnform the unit of measurement from metre to kilometre.
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")

#The code chunk below is used to plot these four study areas and the locations of the childcare centres.
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### 4.7.5.5 Computing KDE

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

#### 4.7.5.6 Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

### 4.8 Nearest Neighbour Analysis

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used. \#### 4.8.1 Testing spatial point patterns using Clark and Evans Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

#### 4.8.2 Clark and Evans Test: Choa Chu Kang planning area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

#### 4.8.3 Clark and Evans Test: Tampines planning area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
