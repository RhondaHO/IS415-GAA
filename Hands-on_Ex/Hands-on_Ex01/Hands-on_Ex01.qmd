---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"

title-block-banner: true

date: "r Sys.Date()"

format: html  

execute: 
  message: false
  warning: false

editor: visual
---

## Getting Started

Install and load the required packages.

```{r}
#| eval: false
install.packages("pacman")

```

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

1.  Import data from the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:
    -   *MP14_SUBZONE_WEB_PL*, a polygon feature layer in ESRI shapefile format

    -   *CyclingPath*, a line feature layer in ESRI shapefile format

    -   *PreSchool*, a point feature layer in kml file format

```{r}
mpsz = st_read(dsn = "data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL")

cyclingpath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPathGazette")

preschool = st_read("data/geospatial/pre-schools-location-kml.kml")

```

2.  Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.

## Checking Content of a Simple Feature Dataframe

1.  Retrieve information related to the content of a simple feature data frame using methods:

    -   st_geometry()

    -   glimpse()

    -   head()

```{r}
st_geometry(mpsz)
glimpse(mpsz)
head(mpsz, n=5) 
```

## Plotting the Geospatial Data

1.  To visualise the geospatial features, make use of *plot()* of R Graphic.

```{r}
plot(mpsz)
```

2.  To plot only the geometry.

```{r}
#| eval: false
plot(st_geometry(mpsz))
```

3.  Plot the sf object by using a specific attribute.

```{r}
#| eval: false
plot(mpsz["PLN_AREA_N"])
```

## Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either [missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned]{.underline} during the importing process.

This is an example the coordinate system of mpsz simple feature data frame by using *st_crs()* of sf package as shown in the code chunk below.

```{r}
#| eval: false
st_crs(mpsz)
```

Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.

```{r}
#| eval: false
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

## Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data [from geographic coordinate system to projected coordinate system]{.underline}. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.

```{r}
#| eval: false
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

## Importing and Converting An Aspatial Data

Since listings data set is in csv file format, we will use *read_csv()* of **readr** package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.

```{r}
#| eval: false
listings <- read_csv("chap01/data/aspatial/listings.csv")
list(listings)
```

## Creating a simple feature data frame from an aspatial data frame

```{r}
#| eval: false
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

## Geoprocessing with sf package

Firstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths. This is followed by calculating the area of the buffers as shown in the code chunk below. Lastly, sum() of Base R will be used to derive the total land involved.

```{r}
#| eval: false
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

## Point-in-polygon count

```{r}
#| eval: false
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Explorotary Data Analysis (EDA)

1.  Histogram

```{r}
#| eval: false
hist(mpsz3414$`PreSch Density`)
```

2.  Customisable Histogram

```{r}
#| eval: false
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

```

3.  Scatterplot

```{r}
#| eval: false
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
