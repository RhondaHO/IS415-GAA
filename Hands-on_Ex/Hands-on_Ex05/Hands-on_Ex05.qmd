---
title: "Hands-on Exercise 5: 2nd Order Spatial Point Patterns Analysis Methods"

title-block-banner: true

date: "6 february 2023"
date-modified: last-modified

format: html  

execute: 
  message: false
  warning: false

editor: visual
---

## 1. Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or

-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

## 2. Getting Started

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

## 3. Spatial Data Wrangling

### 3.1 Importing the spatial data

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### 3.2 Mapping the geospatial data sets

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()

```

Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('plot')

```

## 4. Geospatial Data wrangling

The first 3 steps are important for dealing with geospatial data wrangling. Source data must be in sf., source data needs to be in the same projection system as once it is converted, cannot tell.

### 4.1 Converting sf data frames to sp's Spatial\* class

The code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
mpsz
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg
```

### 4.2 Converting the Spatial\* class into generic sp format

spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_sp
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg
```

### 4.3 Converting the generic sp format into spatstat's ppp format

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp

plot(childcare_ppp)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(childcare_ppp)

```

### 4.4 Handling duplicated points

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
#check for duplication
any(duplicated(childcare_ppp))

#count the number of co-indicence point
multiplicity(childcare_ppp)

#how many locations have more than one point event
sum(multiplicity(childcare_ppp) > 1)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
tmap_mode('plot')

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
any(duplicated(childcare_ppp_jit))
```

### 4.5 Creating owin object

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
sg_owin <- as(sg_sp, "owin")
plot(sg_owin)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(sg_owin)
```

### 4.6 Combining point events object and owin object

Extract childcare events that are located within Singapore

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
summary(childcareSG_ppp)
```

#### 4.6.1 Extracting study area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
#extract planning areas
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]

#plotting target planning areas
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### 4.6.2 Converting the spatial point data frame into generic sp format

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")


```

#### 4.6.2 Creating owin object

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

#### 4.6.2 Combining childcare points and the study area

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
#rescale to metres to kilometres
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false

#plot the 4 study areas
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

### 

## 5 Second-order Spatial Point Patterns Analysis

???

## 6 Analysing Spatial Point Process Using G-Function

### 

6.1 Choa Chu Kang planning area

#### 6.1.2 Computing G-function estimation

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))

```

#### 6.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
plot(G_CK.csr)
```

### 6.2 Tampiness planning area

#### 6.2.2 Computing G-function estimation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false

G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

#### 6.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
plot(G_tm.csr)
```

## 7 Analysing Spatial Point Process Using F-Function

### 

7.1 Choa Chu Kang planning area

#### 7.1.1 Computing F-function estimation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

#### 7.1.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)

plot(F_CK.csr)
```

### 7.2 Tampiness planning area

#### 7.1.1 Computing F-function estimation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### 7.2.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
plot(F_tm.csr)
```

## 8 Analysing Spatial Point Process Using K-Function

8.1 Choa Chu Kang planning area

#### 8.1.1 Computing K-function estimate

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### 8.1.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### 8.2 Tampiness planning area

#### 8.1.1 Computing K-function estimate

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### 8.1.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)

plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## 9 Analysing Spatial Point Process Using L-Function

9.1 Choa Chu Kang planning area

#### 9.1.1 Computing L Fucntion estimation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### 9.1.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

### 9.2 Tampiness planning area

#### 

9.2.1 Computing L Function estimation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### 9.2.2 Performing Complete Spatial Randomness Test

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))

```
